apiVersion: v1
data:
  setup.sh: |-
    #!/bin/bash

    ID="${MY_POD_NAME#"kafka-local-"}"
    if [[ -f "/bitnami/kafka/data/meta.properties" ]]; then
        export KAFKA_CFG_BROKER_ID="$(grep "broker.id" "/bitnami/kafka/data/meta.properties" | awk -F '=' '{print $2}')"
    else
        export KAFKA_CFG_BROKER_ID="$((ID + 0))"
    fi

    # Configure zookeeper client

    exec /entrypoint.sh /run.sh
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: kafka-local
    meta.helm.sh/release-namespace: kafkaplaypen
  labels:
    app.kubernetes.io/instance: kafka-local
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-20.0.0
  name: kafka-local-scripts
  namespace: kafkaplaypen
---
apiVersion: v1
data:
  init-certs.sh: '#!/bin/bash'
  setup.sh: |-
    #!/bin/bash

    # Execute entrypoint as usual after obtaining ZOO_SERVER_ID
    # check ZOO_SERVER_ID in persistent volume via myid
    # if not present, set based on POD hostname
    if [[ -f "/bitnami/zookeeper/data/myid" ]]; then
        export ZOO_SERVER_ID="$(cat /bitnami/zookeeper/data/myid)"
    else
        HOSTNAME="$(hostname -s)"
        if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
            ORD=${BASH_REMATCH[2]}
            export ZOO_SERVER_ID="$((ORD + 1 ))"
        else
            echo "Failed to get index from hostname $HOST"
            exit 1
        fi
    fi
    exec /entrypoint.sh /run.sh
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: kafka-local
    meta.helm.sh/release-namespace: kafkaplaypen
  labels:
    app.kubernetes.io/component: zookeeper
    app.kubernetes.io/instance: kafka-local
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-11.0.0
  name: kafka-local-zookeeper-scripts
  namespace: kafkaplaypen
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    app: kafka-local-zookeeper
  generation: 1
  labels:
    app.kubernetes.io/component: zookeeper
    app.kubernetes.io/instance: kafka-local
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zookeeper
    role: zookeeper
    app: kafka-local-zookeeper
  name: kafka-local-zookeeper
  namespace: kafkaplaypen
spec:
  podManagementPolicy: Parallel
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: zookeeper
      app.kubernetes.io/instance: kafka-local
      app.kubernetes.io/name: zookeeper
      app: kafka-local-zookeeper
  serviceName: kafka-local-zookeeper-headless
  template:
    metadata:
      labels:
        app.kubernetes.io/component: zookeeper
        app.kubernetes.io/instance: kafka-local
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: zookeeper
        app: kafka-local-zookeeper
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: zookeeper
                  app.kubernetes.io/instance: kafka-local
                  app.kubernetes.io/name: zookeeper
                  app: kafka-local-zookeeper
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - command:
        - /scripts/setup.sh
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: ZOO_DATA_LOG_DIR
        - name: ZOO_PORT_NUMBER
          value: "2181"
        - name: ZOO_TICK_TIME
          value: "2000"
        - name: ZOO_INIT_LIMIT
          value: "10"
        - name: ZOO_SYNC_LIMIT
          value: "5"
        - name: ZOO_PRE_ALLOC_SIZE
          value: "65536"
        - name: ZOO_SNAPCOUNT
          value: "100000"
        - name: ZOO_MAX_CLIENT_CNXNS
          value: "100"
        - name: ZOO_4LW_COMMANDS_WHITELIST
          value: srvr, mntr, ruok
        - name: ZOO_LISTEN_ALLIPS_ENABLED
          value: "no"
        - name: ZOO_AUTOPURGE_INTERVAL
          value: "0"
        - name: ZOO_AUTOPURGE_RETAIN_COUNT
          value: "3"
        - name: ZOO_MAX_SESSION_TIMEOUT
          value: "40000"
        - name: ZOO_SERVERS
          value: kafka-local-zookeeper-0.kafka-local-zookeeper-headless.kafkaplaypen.svc.cluster.local:2888:3888::1
        - name: ZOO_ENABLE_AUTH
          value: "no"
        - name: ZOO_ENABLE_QUORUM_AUTH
          value: "no"
        - name: ZOO_HEAP_SIZE
          value: "2048"
        - name: ZOO_LOG_LEVEL
          value: ERROR
        - name: ALLOW_ANONYMOUS_LOGIN
          value: "yes"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        image: docker.io/bitnami/zookeeper:3.8.0-debian-11-r56
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: zookeeper
        ports:
        - containerPort: 2181
          name: client
          protocol: TCP
        - containerPort: 2888
          name: follower
          protocol: TCP
        - containerPort: 3888
          name: election
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /scripts/setup.sh
          name: scripts
          subPath: setup.sh
        - mountPath: /bitnami/zookeeper
          name: data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1001
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 493
          name: kafka-local-zookeeper-scripts
        name: scripts
      - emptyDir: {}
        name: data
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
